openapi: 3.1.0
info:
  title: CaddieCore Recommendation API
  version: 0.1.0
paths:
  /caddie/recommend:
    post:
      summary: Recommend a golf club and explain the decision
      operationId: postCaddieRecommend
      tags:
        - caddie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecommendationPayload"
            examples:
              range:
                $ref: "./examples/range_request.json"
      responses:
        "200":
          description: Recommendation generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecommendationResponse"
              examples:
                range:
                  $ref: "./examples/range_response.json"
                on_course_hazard:
                  $ref: "./examples/on_course_hazard_response.json"
        "422":
          description: Validation error (missing data or invalid enums)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnvelope"
              examples:
                invalid_payload:
                  value:
                    error_code: validation_error
                    message: Shot samples must contain at least 50 entries
        "429":
          description: Recommendation throttled (future use)
        "500":
          description: Unexpected server failure
components:
  schemas:
    RecommendationPayload:
      type: object
      required: [player, shot_samples, target, scenario]
      properties:
        player:
          $ref: "#/components/schemas/PlayerProfile"
        shot_samples:
          type: array
          minItems: 50
          items:
            $ref: "#/components/schemas/ShotSample"
        target:
          $ref: "#/components/schemas/TargetContext"
        scenario:
          type: string
          enum: [range, on_course]
    PlayerProfile:
      type: object
      required: [player_id, clubs]
      properties:
        player_id:
          type: string
        handicap_index:
          type: number
          nullable: true
        clubs:
          type: array
          minItems: 1
          items:
            type: string
        dominant_hand:
          type: string
          nullable: true
          enum: [left, right]
    ShotSample:
      type: object
      required: [club, carry_m, lateral_m, timestamp]
      properties:
        club:
          type: string
        carry_m:
          type: number
        lateral_m:
          type: number
        timestamp:
          type: string
          format: date-time
    TargetContext:
      type: object
      required: [target_distance_m, elevation_delta_m, wind_speed_mps, wind_direction_deg, lie_type]
      properties:
        target_distance_m:
          type: number
        elevation_delta_m:
          type: number
        wind_speed_mps:
          type: number
        wind_direction_deg:
          type: number
          minimum: 0
          maximum: 360
          exclusiveMaximum: true
        lie_type:
          type: string
          enum: [tee, fairway, rough]
        hazard_distance_m:
          type: number
          nullable: true
    RecommendationResponse:
      type: object
      required: [recommendation, explain_score, telemetry_id, generated_at]
      properties:
        recommendation:
          $ref: "#/components/schemas/Recommendation"
        explain_score:
          type: array
          minItems: 3
          maxItems: 3
          items:
            $ref: "#/components/schemas/ExplainFactor"
        telemetry_id:
          type: string
        generated_at:
          type: string
          format: date-time
    Recommendation:
      type: object
      required: [club, carry_p50_m, carry_p80_m, safety_margin_m, confidence, hazard_flag]
      properties:
        club:
          type: string
        carry_p50_m:
          type: number
        carry_p80_m:
          type: number
        safety_margin_m:
          type: number
        conservative_club:
          type: string
          nullable: true
        confidence:
          type: string
          enum: [low, medium, high]
        hazard_flag:
          type: boolean
    ExplainFactor:
      type: object
      required: [name, weight, direction]
      properties:
        name:
          type: string
          enum: [target_gap, wind_effect, elevation_effect, lie_penalty, dispersion_margin]
        weight:
          type: number
          minimum: 0
          maximum: 1
        direction:
          type: string
          enum: [positive, negative]
    ErrorEnvelope:
      type: object
      required: [error_code, message]
      properties:
        error_code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
          nullable: true
