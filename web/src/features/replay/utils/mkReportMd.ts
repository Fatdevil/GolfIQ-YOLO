import type { ParsedHudRun } from "./parseHudRun";
import type { BenchSummary } from "./parseBenchSummary";

function fmtNumber(value: number | null | undefined, digits = 2): string {
  if (value === null || value === undefined || Number.isNaN(value)) {
    return "n/a";
  }
  if (!Number.isFinite(value)) {
    return String(value);
  }
  return value.toFixed(digits);
}

function fmtMs(value: number | null | undefined): string {
  if (value === null || value === undefined) {
    return "n/a";
  }
  if (!Number.isFinite(value)) {
    return String(value);
  }
  return `${value.toFixed(0)} ms`;
}

function fmtSeconds(value: number | null | undefined): string {
  if (value === null || value === undefined) {
    return "n/a";
  }
  if (!Number.isFinite(value)) {
    return String(value);
  }
  return `${(value / 1000).toFixed(2)} s`;
}

export function mkReportMd(
  run: ParsedHudRun,
  summary: BenchSummary | null | undefined,
): string {
  const lines: string[] = [];
  lines.push("# HUD Run QA Report");
  lines.push("");
  lines.push(`Generated: ${new Date().toISOString()}`);
  lines.push("");

  const session = run.summary;
  lines.push("## Session");
  lines.push("- Session ID: " + (session.sessionId ?? "n/a"));
  lines.push("- Device: " + (session.device ?? "n/a"));
  lines.push("- OS: " + (session.os ?? "n/a"));
  lines.push("- App version: " + (session.appVersion ?? "n/a"));
  lines.push("- Duration: " + fmtSeconds(session.durationMs ?? null));
  lines.push("");

  lines.push("## Metrics");
  lines.push(`- Average FPS: ${fmtNumber(session.avgFps)}`);
  lines.push(`- Latency p95: ${fmtNumber(session.p95Latency)} ms`);
  lines.push(`- Heading RMS mean: ${fmtNumber(session.rmsMean)}`);
  lines.push(
    `- Recenters: ${session.recenterCount} (avg ${fmtMs(session.recenterAvgMs)}, max ${fmtMs(session.recenterMaxMs)})`,
  );
  lines.push("");

  if (run.recenterEvents.length) {
    lines.push("### Recenters");
    lines.push("| Index | Time (s) | Duration (ms) |");
    lines.push("| ----- | -------- | ------------- |");
    run.recenterEvents.forEach((event, index) => {
      lines.push(
        `| ${index + 1} | ${event.timeSec.toFixed(2)} | ${
          event.elapsedMs !== null && event.elapsedMs !== undefined
            ? event.elapsedMs.toFixed(0)
            : "n/a"
        } |`,
      );
    });
    lines.push("");
  }

  if (summary && Object.keys(summary).length) {
    lines.push("## Bench Summary");
    lines.push("| Platform | Runtime | Input | Quant | Threads | Delegate |");
    lines.push("| -------- | ------- | ----- | ----- | ------- | -------- |");
    Object.entries(summary).forEach(([platform, config]) => {
      lines.push(
        `| ${platform} | ${config.runtime} | ${config.inputSize} | ${config.quant} | ${config.threads} | ${
          config.delegate ?? "-"
        } |`,
      );
    });
    lines.push("");
  }

  lines.push("---");
  lines.push("Report generated by Replay Analyzer.");

  return lines.join("\n");
}
